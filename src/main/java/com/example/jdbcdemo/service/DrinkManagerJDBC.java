package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Drink;

public class DrinkManagerJDBC implements DrinkManager {

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableDrink = "CREATE TABLE Drink(id BIGINT GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(20) UNIQUE, price DOUBLE )";

    private PreparedStatement addDrinkStm;
    private PreparedStatement deleteAllDrinksStm;
    private PreparedStatement getAllDrinksStm;
    private PreparedStatement removeDrink;

    private Statement statement;

    public DrinkManagerJDBC() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Drink".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableDrink);

            addDrinkStm = connection
                    .prepareStatement("INSERT INTO Drink (name, price) VALUES (?, ?)");
            deleteAllDrinksStm = connection
                    .prepareStatement("DELETE FROM Drink");
            getAllDrinksStm = connection
                    .prepareStatement("SELECT id, name, price FROM Drink");
            removeDrink = connection
                    .prepareStatement("DELETE FROM Drink WHERE name=?");


        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    void clearDrinks() {
        try {
            deleteAllDrinksStm.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public int addDrink(Drink drink) {
        int count = 0;
        try {
            addDrinkStm.setString(1, drink.getName());
            addDrinkStm.setDouble(2, drink.getPrice());
            count = addDrinkStm.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public void removeDrink(String name) {
        try {
            removeDrink.setString(1, name);
            removeDrink.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void addAllDrinks(List<Drink> list) {
        try {
            connection.setAutoCommit(false);
            for (Drink drink : list) {
                addDrinkStm.setString(1, drink.getName());
                addDrinkStm.setDouble(2, drink.getPrice());
                addDrinkStm.executeUpdate();
            }
            connection.commit();
        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
    }


    @Override
    public List<Drink> getAllDrinks() {
        List<Drink> drinks = new ArrayList<>();

        try {
            ResultSet rs = getAllDrinksStm.executeQuery();

            while (rs.next()) {
                Drink p = new Drink();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setPrice(rs.getDouble("price"));
                drinks.add(p);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return drinks;
    }

    @Override
    public void removeSelectedDrinks(List<Drink> list) {
        try {
            connection.setAutoCommit(false);
            for (Drink drink : list) {
                removeDrink.setString(1, drink.getName());
                removeDrink.executeUpdate();
            }
            connection.commit();
        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
    }
}
