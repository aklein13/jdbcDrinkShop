package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Drink;

public class DrinkManagerJDBC implements DrinkManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableDrink = "CREATE TABLE Drink(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), yob integer)";

	private PreparedStatement addDrinkStm;
	private PreparedStatement deleteAllDrinksStm;
	private PreparedStatement getAllDrinksStm;

	private Statement statement;

	public DrinkManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Drink".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableDrink);

			addDrinkStm = connection
					.prepareStatement("INSERT INTO Drink (name, yob) VALUES (?, ?)");
			deleteAllDrinksStm = connection
					.prepareStatement("DELETE FROM Drink");
			getAllDrinksStm = connection
					.prepareStatement("SELECT id, name, yob FROM Drink");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearPersons() {
		try {
			deleteAllDrinksStm.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addDrink(Drink drink) {
		int count = 0;
		try {
			addDrinkStm.setString(1, drink.getName());
			addDrinkStm.setInt(2, drink.getPrice());

			count = addDrinkStm.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<Drink> getAllDrinks() {
		List<Drink> drinks = new ArrayList<Drink>();

		try {
			ResultSet rs = getAllDrinksStm.executeQuery();

			while (rs.next()) {
				Drink p = new Drink();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setPrice(rs.getInt("yob"));
				drinks.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return drinks;
	}

}
